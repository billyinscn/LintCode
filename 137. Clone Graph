Description

Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors. Nodes are labeled uniquely.

You need to return a deep copied graph, which has the same structure as the original graph, and any changes to the new graph 
will not have any effect on the original graph.

Clarification
How we serialize an undirected graph: http://www.lintcode.com/help/graph/
Graph
For example:

{1,2,4#2,1,4#3,5#4,1,2#5,3} represents follow graph:

1------2  3
 \     |  | 
  \    |  |
   \   |  |
    \  |  |
      4   5
we use # to split each node information.
1,2,4 represents that 2, 4 are 1's neighbors
2,1,4 represents that 1, 4 are 2's neighbors
3,5 represents that 5 is 3's neighbor
4,1,2 represents that 1, 2 are 4's neighbors
5,3 represents that 3 is 5's neighbor

Example
Example1

Input:
{1,2,4#2,1,4#4,1,2}
Output: 
{1,2,4#2,1,4#4,1,2}
Explanation:
1------2  
 \     |  
  \    |  
   \   |  
    \  |  
      4   
*************************

首先会想到用BFS或者DFS去遍历这个图，然后对于每一个点，我们做一个新的点出来。我们要解决的问题是新做的点之间要像遍历过的点那样连起来。
由此我们想到用HashMap来做老的点和新的点之间的对应。
使用宽度优先搜索 BFS 的版本。

第一步：找到所有的点
第二步：复制所有的点，将映射关系存起来
第三步：找到所有的边，复制每一条边

***************************
class Solution:
    def cloneGraph(self, node):
        root = node
        if node is None:
            return node
            
        # use bfs algorithm to traverse the graph and get all nodes.
        nodes = self.getNodes(node)
        
        # copy nodes, store the old->new mapping information in a hash map
        mapping = {}
        for node in nodes:
            mapping[node] = UndirectedGraphNode(node.label)
        
        # copy neighbors(edges)
        for node in nodes:
            new_node = mapping[node]
            for neighbor in node.neighbors:
                new_neighbor = mapping[neighbor]
                new_node.neighbors.append(new_neighbor)
        
        return mapping[root]
        
    def getNodes(self, node):
        q = collections.deque([node])
        result = set([node])
        while q:
            head = q.popleft()
            for neighbor in head.neighbors:
                if neighbor not in result:
                    result.add(neighbor)
                    q.append(neighbor)
        return result
**************************
