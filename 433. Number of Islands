
Description

Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

Example
Example 1:

Input:
[
  [1,1,0,0,0],
  [0,1,0,0,1],
  [0,0,0,1,1],
  [0,0,0,0,0],
  [0,0,0,0,1]
]
Output:
3
Example 2:

Input:
[
  [1,1]
]
Output:
1
****************************
// 思路：使用图BFS的模板。
from collections import deque

queue = deque()
seen = set()  

seen.add(start)
queue.append(start)
while len(queue):
    head = queue.popleft()
    for neighbor in head.neighbors:
        if neighbor not in seen:
            seen.add(neighbor)
            queue.append(neighbor)
            
上述代码中：

neighbor 表示从某个点 head 出发，可以走到的下一层的节点。
set/seen 存储已经访问过的节点（已经丢到 queue 里去过的节点）
queue 存储等待被拓展到下一层的节点
set/seen 与 queue 是一对好基友，无时无刻都一起出现，往 queue 里新增一个节点，就要同时丢到 set 里。

***********************
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

**************************

思路： 就是一个二位矩阵，从它的每一个元素开始， 如果值是 ‘1’ ，且该位置没有被访问过，那么就调用一个 BFS 即可，借助队列 queue 遍历其周围四个位置，
若没有越界的话，就将 visited 中该邻居位置标记为 true，终止条件是neighbor中没有一个有值为“1”。这时候把island +1。
************************

def NumofIsland (self, grid):
    if not grid or not grid[0]:
      return 0
    visited = Set ()
    island = 0
    for i in range len(grad):
        for j in range len(grad[0]):
            if grad[i][j] and (i,j) is not in visited:
                self.Bfs (i, j, visited)
            island += 1
     return island
     
def Bfs (self, grid, x, y, visited):
    queue = deque (x,y)
    visited = set (x,y)
    while queue:
       x,y = queue.leftpop ()
       for x_delta, y_delta in [(1, 0), (0, -1), [-1, 0), (0, 1)]:
          x_next, y_next =  x + x_delta, y + y_delta
          if not self.valid (x_delta, y_delta):
            continue
          set.add ((x_delta, y_delta))
          queue.append((x_delta, y_delta))
          
 def valid (self, grid, x, y, visited):
     m = len(grid)
     n = len (grid[0])
     return 0<=x<m and 0=<y<n and grid[x][y] and (x,y) not in visited

