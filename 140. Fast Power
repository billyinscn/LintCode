Description

Calculate the an % b where a, b and n are all 32bit non-negative integers.

Have you met this question in a real interview?  
Example
For 231 % 3 = 2

For 1001000 % 1000 = 0

Challenge
O(logn)

二分法

class Solution:
    """
    @param a, b, n: 32bit integers
    @return: An integer
    """
    def fastPower(self, a, b, n):
        if n == 1:
            return a % b
        elif n == 0:
            # do not use `1` instead `1 % b` because `b = 1`
            return 1 % b
        elif n < 0:
            return -1

        # (a * b) % p = ((a % p) * (b % p)) % p
        product = self.fastPower(a, b, n / 2)
        product = (product * product) % b
        if n % 2 == 1:
            product = (product * a) % b

        return product
